name: Bootstrap Workflow
description: "Bootstrap workflows with common requirements"
inputs:
  PIPELINES_READ_TOKEN:
    description: "The GitHub token to use for checking out the infrastructure-live repo"
    required: true
  account_id:
    description: "Child Account ID to operate on"
    required: true
  account_name:
    description: "Child Account Name to operate on"
    required: true
  job:
    description: "JSON of pipelines orchestrate job"
    required: true

runs:
  using: composite
  steps:
    - name: Check out repo code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Bootstrap Workflow
      id: gruntwork_context
      uses: gruntwork-io/pipelines-bootstrap@v1.0.0
      with:
        token: ${{ inputs.PIPELINES_READ_TOKEN }}
        change_type: ${{ fromJson(inputs.job).ChangeType }}
        branch: ${{ fromJson(inputs.job).Ref }}
        working_directory: ${{ fromJson(inputs.job).WorkingDirectory }}
        account_id: ${{ fromJson(inputs.job).AccountId }}
        terragrunt_command: ${{ fromJson(inputs.job).Action.Command }} ${{ fromJson(inputs.job).Action.Args }}
        additional_data: ${{ toJson(fromJson(inputs.job).AdditionalData) }}
        account_names: ${{ fromJson(inputs.job).AdditionalData.AccountNames }}
        child_account_id: ${{ inputs.account_id }}
        new_account_name: ${{ inputs.account_name }}

    # Finally, auth to the mgmt account so we can assume a role in the child account
    - name: "[Baseline]: Authenticate to AWS"
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region:  ${{ steps.gruntwork_context.outputs.default_aws_region }}
        role-to-assume: "arn:aws:iam::${{ steps.gruntwork_context.outputs.account_id }}:role/${{ steps.gruntwork_context.outputs.role_name }}"
        role-duration-seconds: 3600
        role-session-name: ${{ steps.gruntwork_context.outputs.role_session_name }}

    # Auth to child account
    # THIS RETRIEVES PERMISSIONS TO BE ABLE TO RUN A PLAN/APPLY IN THE NEWLY CREATED CHILD ACCOUNT
    # The "AWSControlTowerExecution" role being assumed here is created by Control Tower in each account it provisions
    # and it can be assumed by a role in the management account.
    - name: "[Baseline]: Assume role new child account"
      shell: bash
      env:
        SESSION_NAME: ${{ steps.gruntwork_context.outputs.role_session_name }}
        CHILD_ACCOUNT_ID: ${{ inputs.account_id }}
      run: |
        echo "Assuming AWSControlTowerExecution Role -- arn:aws:iam::$CHILD_ACCOUNT_ID:role/AWSControlTowerExecution"
        RESPONSE="$(aws sts assume-role --role-arn "arn:aws:iam::$CHILD_ACCOUNT_ID:role/AWSControlTowerExecution" --role-session-name "$SESSION_NAME")"
        ASSUMED_ROLE_CREDS="$(echo "$RESPONSE" | jq -r '.Credentials')"
        AWS_ACCESS_KEY_ID="$(echo "$ASSUMED_ROLE_CREDS" | jq -r '.AccessKeyId')"
        echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> "$GITHUB_ENV"
        echo "::add-mask::$AWS_ACCESS_KEY_ID"
        AWS_SECRET_ACCESS_KEY="$(echo "$ASSUMED_ROLE_CREDS" | jq -r '.SecretAccessKey')"
        echo AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" >> "$GITHUB_ENV"
        echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
        AWS_SESSION_TOKEN="$(echo "$ASSUMED_ROLE_CREDS" | jq -r '.SessionToken')"
        echo AWS_SESSION_TOKEN="$AWS_SESSION_TOKEN" >> "$GITHUB_ENV"
        echo "::add-mask::$AWS_SESSION_TOKEN"

    - name: "[Baseline]: Confirm Account Access"
      shell: bash
      run: aws sts get-caller-identity

    # This Bootstrap step is a workaround for the error that happens when running plan-all for the first time in a
    # new account with multiple modules. The error is:
    #
    #    OperationAborted: A conflicting conditional operation is currently in progress against this resource. Please try again.
    #    BucketAlreadyOwnedByYou: Your previous request to create the named bucket succeeded and you already own it.
    #
    # This happens because each module is trying to create buckets for state and logs when they do not exist.
    # Setting Terragrunt Parallelism to 1 does NOT prevent this error from happening. So we'll instead run an init in
    # a single module first to create the buckets so that subsequent run-all commands do not fail.
    - name: "[Baseline]: Bootstrap child account with state & logs S3 buckets"
      if: ${{ contains(steps.gruntwork_context.outputs.terragrunt_command, 'plan') }}
      uses: gruntwork-io/pipelines-execute@v4.0.0
      with:
        token: ${{ inputs.PIPELINES_READ_TOKEN }}
        working_directory: "${{ inputs.account_name }}/_global/account-baseline"
        terragrunt_command: "init"
        infra_live_repo: '.'
        infra_live_directory: '.'
        infra_live_repo_branch: ${{ steps.gruntwork_context.outputs.branch }}
        gruntwork_config: "${{ steps.gruntwork_context.outputs.gruntwork_config }}"
        gruntwork_config_file: "${{ steps.gruntwork_context.outputs.gruntwork_config_file }}"
        deploy_branch_name: ${{ steps.gruntwork_context.outputs.deploy_branch_name }}
        tf_binary: ${{ steps.gruntwork_context.outputs.tf_binary }}

    # Apply Access Control Roles and Baseline in Delegated Account
    - name: "[Baseline]: Bootstrap child account with access control roles, state & logs S3 buckets"
      uses: gruntwork-io/pipelines-execute@v4.0.0
      with:
        token: ${{ inputs.PIPELINES_READ_TOKEN }}
        working_directory: "${{ inputs.account_name }}"
        terragrunt_command: ${{ steps.gruntwork_context.outputs.terragrunt_command }}
        infra_live_repo: '.'
        infra_live_directory: '.'
        infra_live_repo_branch: ${{ steps.gruntwork_context.outputs.branch }}
        gruntwork_config: "${{ steps.gruntwork_context.outputs.gruntwork_config }}"
        gruntwork_config_file: "${{ steps.gruntwork_context.outputs.gruntwork_config_file }}"
        deploy_branch_name: ${{ steps.gruntwork_context.outputs.deploy_branch_name }}
        tf_binary: ${{ steps.gruntwork_context.outputs.tf_binary }}
